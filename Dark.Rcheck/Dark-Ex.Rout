
R version 3.3.0 (2016-05-03) -- "Supposedly Educational"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Dark"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "Dark-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('Dark')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("AICc")
> ### * AICc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: AICc
> ### Title: Akaike information criterion
> ### Aliases: AICc
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> AICc(dark)
[1] -561.7096
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("AICc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BestFit")
> ### * BestFit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BestFit
> ### Title: BestFit
> ### Aliases: BestFit
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> tmp <- TestData(0:20)
> P<-Start(tmp,100)
> MSC<-ModelSelect(tmp, P)
> BestFit(tmp, MSC)
$time
 [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

$thrs
 [1] -0.1085050 -0.6003126 -1.0093998 -0.6739022 -0.9246119 -1.1353713
 [7] -0.9130961 -1.1112065 -1.3799363 -1.7727714 -1.6981064 -2.1324605
[13] -2.5475959 -3.0635950 -2.5251554 -2.7677824 -2.8028041 -2.6765227
[19] -2.7377603 -2.8171333 -2.8008284

$resid
 [1] -0.001661726  0.036030350 -0.170442512  0.242586028  0.021543667
 [6] -0.177863437  0.048755835 -0.031273987 -0.017083493 -0.127391044
[11]  0.229651268  0.077617046 -0.055220540 -0.294182794  0.240208314
[16] -0.002966724 -0.038536928  0.087195779  0.025409455 -0.054512292
[21] -0.038756263

$fit
 [1] -0.1068433 -0.6363430 -0.8389573 -0.9164882 -0.9461556 -0.9575079
 [7] -0.9618519 -1.0799325 -1.3628528 -1.6453804 -1.9277577 -2.2100775
[13] -2.4923753 -2.7694122 -2.7653637 -2.7648157 -2.7642672 -2.7637185
[19] -2.7631698 -2.7626210 -2.7620722

$thet
[1] -1.00  1.00  1.00 -0.24  6.00  0.20 13.00

$sse
[1] 0.03

$data
[1] "Test_data_0.03"

$opt
[1] -0.9645444  0.8577012  1.0409856 -0.2822842  6.5875844  0.2828330 12.9690481

$call
BestFit(obj = tmp, MSC = MSC)

$AIC
[1]   0.00000   0.00000 -47.66046   0.00000 -39.54424 -54.59038 -62.68963

$Pn
[1] 7

$Mod
[1] "P7c"

$val
[1] 0.3614479

$R2
[1] 0.9790595

attr(,"class")
[1] "dark"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BestFit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BootDark")
> ### * BootDark
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BootDark
> ### Title: BootDark
> ### Aliases: BootDark
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> set.seed(1234)
> Time<- seq(0,20)
> tmp<- TestData(Time)
> P<-Start(tmp,1000)
> MSC<-ModelSelect(tmp, P)
> tmp2<-BestFit(tmp, MSC)
> tmp3<-MultiStart(tmp2,10)
> BootDark(tmp3,50)
$time
 [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

$thrs
 [1] -0.2090699 -0.5840684 -0.6768340 -1.3564997 -0.9073578 -0.9056106
 [7] -1.0970691 -1.3337675 -1.5774305 -1.8740357 -2.0426068 -2.3729089
[13] -2.5744450 -2.6688331 -2.5538099 -2.7791017 -2.8885093 -2.9978236
[19] -3.0250024 -2.5015651 -2.9367752

$resid
 [1] -0.02350211  0.04067034  0.17003725 -0.39727392  0.10869687  0.13918808
 [7] -0.03773173 -0.08002014  0.05619203  0.05553243  0.11780119 -0.03230161
[13] -0.09309750 -0.07752749  0.12342290 -0.03471146 -0.09162665 -0.15990874
[19] -0.15501227  0.39349910 -0.02210969

$fit
 [1] -0.1855678 -0.6247387 -0.8468712 -0.9592258 -1.0160547 -1.0447987
 [7] -1.0593374 -1.2537474 -1.6336225 -1.9295681 -2.1604080 -2.3406073
[13] -2.4813475 -2.5913057 -2.6772328 -2.7443902 -2.7968827 -2.8379149
[19] -2.8699901 -2.8950642 -2.9146655

$thet
[1] -1.00  1.00  1.00 -0.24  6.00  0.20 13.00

$sse
[1] 0.03

$data
[1] "Test_data_0.03"

$opt
[1] -2.9848781  0.8886495  0.6816147  6.5815212  1.9106608  0.2462047

$AIC
[1]   0.00000   0.00000 -53.60463   0.00000 -48.68015 -60.76313 -53.17714

$Pn
[1] 6

$Mod
[1] "P6c"

$val
[1] 0.493564

$R2
[1] 0.970624

$call
BootDark(obj = tmp3, R = 50)

$Bootstrap
          2.5%    50%  97.5%
AT      -3.241 -2.993 -2.805
CC       0.712  0.967  1.273
1/Tau_c  0.155  0.771  7.370
Alpha    5.953  6.580  7.394
Offset   1.556  1.891  2.199
1/Tau_r  0.158  0.244  0.402
         0.000  0.000  0.000

$weight
       AT        CC   1/Tau_c     Alpha    Offset   1/Tau_r           
2.2935780 1.7825312 0.1386001 0.6939625 1.5552100 4.0983607       Inf 

$valid
[1] 1 1 1 1 1 1 0

attr(,"class")
[1] "dark"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BootDark", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Dark-package")
> ### * Dark-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Dark-package
> ### Title: Dark: A package to analyse dark adaptation data
> ### Aliases: Dark-package Dark
> ### Keywords: package
> 
> ### ** Examples
> 
> set.seed(1234)
> Time<- seq(0,20)
> tmp<- TestData(Time)
> P<-Start(tmp,1000)
> MSC<-ModelSelect(tmp, P)
> tmp2<-BestFit(tmp, MSC)
> tmp3<-MultiStart(tmp2,10)
> BootDark(tmp3,50) 
$time
 [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

$thrs
 [1] -0.2090699 -0.5840684 -0.6768340 -1.3564997 -0.9073578 -0.9056106
 [7] -1.0970691 -1.3337675 -1.5774305 -1.8740357 -2.0426068 -2.3729089
[13] -2.5744450 -2.6688331 -2.5538099 -2.7791017 -2.8885093 -2.9978236
[19] -3.0250024 -2.5015651 -2.9367752

$resid
 [1] -0.02350211  0.04067034  0.17003725 -0.39727392  0.10869687  0.13918808
 [7] -0.03773173 -0.08002014  0.05619203  0.05553243  0.11780119 -0.03230161
[13] -0.09309750 -0.07752749  0.12342290 -0.03471146 -0.09162665 -0.15990874
[19] -0.15501227  0.39349910 -0.02210969

$fit
 [1] -0.1855678 -0.6247387 -0.8468712 -0.9592258 -1.0160547 -1.0447987
 [7] -1.0593374 -1.2537474 -1.6336225 -1.9295681 -2.1604080 -2.3406073
[13] -2.4813475 -2.5913057 -2.6772328 -2.7443902 -2.7968827 -2.8379149
[19] -2.8699901 -2.8950642 -2.9146655

$thet
[1] -1.00  1.00  1.00 -0.24  6.00  0.20 13.00

$sse
[1] 0.03

$data
[1] "Test_data_0.03"

$opt
[1] -2.9848781  0.8886495  0.6816147  6.5815212  1.9106608  0.2462047

$AIC
[1]   0.00000   0.00000 -53.60463   0.00000 -48.68015 -60.76313 -53.17714

$Pn
[1] 6

$Mod
[1] "P6c"

$val
[1] 0.493564

$R2
[1] 0.970624

$call
BootDark(obj = tmp3, R = 50)

$Bootstrap
          2.5%    50%  97.5%
AT      -3.241 -2.993 -2.805
CC       0.712  0.967  1.273
1/Tau_c  0.155  0.771  7.370
Alpha    5.953  6.580  7.394
Offset   1.556  1.891  2.199
1/Tau_r  0.158  0.244  0.402
         0.000  0.000  0.000

$weight
       AT        CC   1/Tau_c     Alpha    Offset   1/Tau_r           
2.2935780 1.7825312 0.1386001 0.6939625 1.5552100 4.0983607       Inf 

$valid
[1] 1 1 1 1 1 1 0

attr(,"class")
[1] "dark"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Dark-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Declutter")
> ### * Declutter
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Declutter
> ### Title: Declutter
> ### Aliases: Declutter
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> set.seed(123)
> Time  <-c(0, 0.02, 1, 2,  3, 3.02,  5, 6, 6.02, 7, 9, 9.02, 11, 
+ 12, 12.02, 13, 15, 15.02, 16, 18, 18.02, 20) 
> # with duplicated times
> set.seed(1234)
> tmp <- TestData(Time, sse=0.05) 
> ## Not run: plot(tmp$time, tmp$thrs, ylim=c(-4,0))
> tmp <- Declutter(tmp)
> ## Not run: points(tmp$time, tmp$thrs, col='red', pch=16)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Declutter", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("GetData")
> ### * GetData
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GetData
> ### Title: GetData
> ### Aliases: GetData
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> set.seed(1234)
> tmp <- GetData()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GetData", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("H")
> ### * H
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: H
> ### Title: This is a simple switch function.
> ### Aliases: H
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> 
> x <- seq(0, 20, by=0.1)
> k <- 10
> t <- 10
> op <- par(las=1, bty='n')
> ## Not run: plot(x,H(x,k,t), 'l')
> par(op)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("H", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("ModelSelect")
> ### * ModelSelect
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ModelSelect
> ### Title: ModelSelect
> ### Aliases: ModelSelect
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> set.seed(1234)
> tmp<- TestData(0:20)
> P<-Start(tmp)
> ModelSelect(tmp,P)
$AIC
[1]   0.00000   0.00000 -53.60463   0.00000 -47.79579 -59.75665 -47.19072

$param
           [,1]       [,2]        [,3]       [,4]      [,5]      [,6]     [,7]
[1,]  -4.533799  4.3136405 18.28376736  0.0000000 0.0000000 0.0000000  0.00000
[2,] -19.160243 18.9747265 42.04174017  0.2182233 0.1659605 0.0000000  0.00000
[3,]  -2.935455  0.9950566  0.49152457  7.2243643 1.7376466 0.2936614  0.00000
[4,]  -0.380737  0.1716052  0.07219324 -0.1667514 0.1667303 0.2067310 15.65615

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ModelSelect", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("MultiStart")
> ### * MultiStart
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MultiStart
> ### Title: MultiStart
> ### Aliases: MultiStart
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> set.seed(1234)
> Time<- seq(0,20)
> tmp<- TestData(Time)
> P<-Start(tmp,1000)
> MSC<-ModelSelect(tmp, P)
> tmp2<-BestFit(tmp, MSC)
> tmp3<-MultiStart(tmp2,10)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MultiStart", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("P3")
> ### * P3
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: P3
> ### Title: Three parameter model.
> ### Aliases: P3
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> set.seed(1234)
> x <- 0:20
> a <- c(-1.00,  1.00,  1.00, -0.24,  6.00,  0.20, 13.00)
> tmp <- TestData(x, a)
> y <- tmp$resid
> P3(TRUE)
$Pn
[1] 3

$Mod
[1] "P3"

> # Describes the model
> 
> P3(a)
[1] 18.29573
> # The sum of squared residuals
> 
> P3(a,x)
 [1]  0.0000000 -0.6321206 -0.8646647 -0.9502129 -0.9816844 -0.9932621
 [7] -0.9975212 -0.9990881 -0.9996645 -0.9998766 -0.9999546 -0.9999833
[13] -0.9999939 -0.9999977 -0.9999992 -0.9999997 -0.9999999 -1.0000000
[19] -1.0000000 -1.0000000 -1.0000000
> # The fitted thresholds for given parameters 'theta' and times 'x'
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("P3", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("P5c")
> ### * P5c
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: P5c
> ### Title: Five parameter model.
> ### Aliases: P5c
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> set.seed(1234)
> x <- 0:20
> a <- c(-1.00,  1.00,  1.00, -0.24,  6.00,  0.20, 13.00)
> tmp <- TestData(x, a)
> y <- tmp$resid
> P5c(TRUE)
$Pn
[1] 5

$Mod
[1] "P5c"

> # Describes the model
> 
> P5c(a)
[1] 127.1033
> # The sum of squared residuals
> 
> P5c(a,x)
 [1]  0.0000000 -0.6321206 -0.8646647 -0.9502129 -0.9816844 -0.9932621
 [7] -0.9975212 -1.2390881 -1.4796645 -1.7198766 -1.9599546 -2.1999833
[13] -2.4399939 -2.6799977 -2.9199992 -3.1599997 -3.3999999 -3.6400000
[19] -3.8800000 -4.1200000 -4.3600000
> # The fitted thresholds for given parameters 'theta' and times 'x'
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("P5c", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("P6c")
> ### * P6c
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: P6c
> ### Title: A six parameter model
> ### Aliases: P6c
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> set.seed(1234)
> x <- 0:20
> a <- c(-2, 2, 1/2, 10, 3, 1/8)
> # P6c(TRUE)
> # Describes the model
> 
> # P6c(a)
> # The sum of squared residuals
> 
> # P6c(a,x)
> # The fitted thresholds for given parameters 'a' and times 'x'
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("P6c", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("P7c")
> ### * P7c
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: P7c
> ### Title: Seven parameter model
> ### Aliases: P7c
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> set.seed(1234)
> x <- 0:20
> a <- c(-1.00,  1.00,  1.00, -0.24,  6.00,  0.20, 13.00)
> tmp <- TestData(x, a)
> y <- tmp$resid
> # P7c(TRUE)
> # Describes the model
> 
> # P7c(a)
> # The sum of squared residuals
> 
> # P7c(a,x)
> # The fitted thresholds for given parameters 'a' and times 'x'
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("P7c", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Start")
> ### * Start
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Start
> ### Title: Start
> ### Aliases: Start
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> set.seed(1234)
> tmp<-TestData(0:20)
> Start(tmp, 10)
              CT        CC         Tau          S2      Alph         S3
 [1,] -1.2209249 0.9016046   0.7421663 -0.33333333  8.337778 0.33333333
 [2,] -0.7149974 0.6044030   3.2551923 -0.46666667 15.000000 0.06666667
 [3,] -0.8414793 0.3072015   1.6545251 -0.06666667  3.341111 0.20000000
 [4,] -0.4620337 1.3474068   1.1091337 -0.40000000  6.672222 0.40000000
 [5,] -0.3355518 0.1586008 100.0000000 -0.53333333  1.675556 0.13333333
 [6,] -0.9679612 1.1988061   6.3051401 -0.20000000 11.668889 0.26666667
 [7,] -1.3474068 0.7530038   0.9521948 -0.60000000 10.003333 0.46666667
 [8,] -0.5885156 0.0100000   2.1939338  0.00000000 13.334444 0.53333333
 [9,] -0.2090699 1.0502053   0.8341633 -0.26666667  0.010000 0.00000000
[10,] -1.0944431 0.4558023   1.3280146 -0.13333333  5.006667 0.60000000
          Beta
 [1,] 19.44444
 [2,] 15.00000
 [3,] 16.11111
 [4,] 20.00000
 [5,] 15.55556
 [6,] 16.66667
 [7,] 17.77778
 [8,] 17.22222
 [9,] 18.33333
[10,] 18.88889
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Start", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("TestData")
> ### * TestData
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: TestData
> ### Title: Data that can be used to test other scripts.
> ### Aliases: TestData
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> set.seed(1234)
> x <- seq(0,20)
> tmp <- TestData(x)
> tmp
$call
TestData(x = x)

$time
 [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

$thrs
 [1] -0.2090699 -0.5840684 -0.6768340 -1.3564997 -0.9073578 -0.9056106
 [7] -1.0970691 -1.3337675 -1.5774305 -1.8740357 -2.0426068 -2.3729089
[13] -2.5744450 -2.6688331 -2.5538099 -2.7791017 -2.8885093 -2.9978236
[19] -3.0250024 -2.5015651 -2.9367752

$resid
 [1] -0.20906992  0.04805215  0.18783072 -0.40628676  0.07432658  0.08765145
 [7] -0.09954788 -0.09467941 -0.09776595 -0.15415907 -0.08265220 -0.17292560
[13] -0.13445112  0.01116459  0.16618925 -0.01910201 -0.08850944 -0.15782368
[19] -0.14500239  0.41843493  0.02322476

$fit
 [1]  0.0000000 -0.6321206 -0.8646647 -0.9502129 -0.9816844 -0.9932621
 [7] -0.9975212 -1.2390881 -1.4796645 -1.7198766 -1.9599546 -2.1999833
[13] -2.4399939 -2.6799977 -2.7199992 -2.7599997 -2.7999999 -2.8400000
[19] -2.8800000 -2.9200000 -2.9600000

$thet
[1] -1.00  1.00  1.00 -0.24  6.00  0.20 13.00

$sse
[1] 0.03

$val
[1] 0.02950394

$data
[1] "Test_data_0.03"

attr(,"class")
[1] "dark"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("TestData", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dark")
> ### * dark
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dark
> ### Title: Dark adaptation data.
> ### Aliases: dark
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(dark)
> ## load(dark)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dark", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.913 0.027 1.959 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
